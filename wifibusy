#!/usr/bin/lua

-- settings are in /etc/config/wifibusy

local uci = require "luci.model.uci".cursor()
require "nixio"

local data = {wan={}, ath9k={}, ath10k={}}
local busydata = {}

function debug_print(s)
  -- uncomment this to print debug messages
  --print(s)
end

function gather_ath9k(ath9k_interface)
  local this_data = {}
  local last_data = data.ath9k[ath9k_interface]
  this_data.noise = "?" -- when you first tune to a channel, the noise level isn't filled in yet

  local wlan_survey = io.popen("iw dev "..ath9k_interface.." survey dump")

  local in_freq_use = 0
  this_data.tx = 0
  this_data.recv = 0
  for line in wlan_survey:lines() do
    if string.find(line, '%[in use%]') ~= nil then
      in_freq_use = 1
    elseif string.find(line, "Survey data from ") ~= nil then
      in_freq_use = 0
    end

    if in_freq_use == 1 then
      local start_match, end_match, type, ms = string.find(line, "channel (%S+) time:%s+(%d+) ms")
      local extension = string.find(line, "extension channel")
      if type ~= nil and extension == nil then
        if type == "active" then
          this_data.active = ms
        elseif type == "busy" then
          this_data.busy = ms
        elseif type == "receive" then
          this_data.recv = ms
        elseif type == "transmit" then
          this_data.tx = ms
        end
      end

      local start_match, end_match, noise = string.find(line, "noise:%s+(-?%d+) dBm")
      if noise ~= nil then
        this_data.noise = noise
      end
    end
  end
  wlan_survey:close()

  this_data.local_busy = this_data.tx -- recv includes traffic not to the local mac
  if (last_data ~= nil) and (last_data.active ~= nil) and (this_data.active ~= nil) then
    this_data.total_time = this_data.active - last_data.active
    this_data.busy_time = this_data.busy - last_data.busy
    this_data.local_busy_time = this_data.local_busy - last_data.local_busy

    this_data.pct_busy = this_data.busy_time/this_data.total_time
    this_data.pct_local = this_data.local_busy_time/this_data.total_time

    debug_print("9k total "..this_data.total_time.." busy "..this_data.busy_time.." "..math.floor(this_data.pct_busy*100).."% local "..math.floor(this_data.pct_local*100).."%")
  end

  data.ath9k[ath9k_interface] = this_data

  return this_data.pct_busy, this_data.pct_local
end

function gather_ath10k(ath10k_phy)
  local this_data = {}
  local last_data = data.ath10k[ath10k_phy]

  local fw_stats = io.open("/sys/kernel/debug/ieee80211/"..ath10k_phy.."/ath10k/fw_stats","r")
  if fw_stats == nil then
    return
  end

  for line in fw_stats:lines() do
    local start_match, end_match, type, count = string.find(line, "^%s+(%S.*%S) count%s+(%d+)")
    if type ~= nil then
      if type == "RX clear" then -- "RX clear" they mean "channel busy"
        this_data.rx_clear = count
      elseif type == "Cycle" then
        this_data.cycle = count
      elseif type == "TX frame" then
        this_data.tx_frame = count
      elseif type == "RX frame" then
        this_data.rx_frame = count
      end
    end
  end
  fw_stats:close()

  if last_data ~= nil then
    if this_data.cycle < last_data.cycle then -- cycle wrap
      this_data.cdiff = this_data.cycle - last_data.cycle + 2^31
      -- all the cycle counters get divided by 2 on cycle wrap for some reason
      -- this happens at some point in the past, so *2 isn't exactly right
      this_data.cleardiff = this_data.rx_clear*2 - last_data.rx_clear
      this_data.tx_frame_diff = this_data.tx_frame*2 - last_data.tx_frame
      this_data.rx_frame_diff = this_data.rx_frame*2 - last_data.rx_frame
    else
      this_data.cdiff = this_data.cycle - last_data.cycle
      this_data.cleardiff = this_data.rx_clear - last_data.rx_clear
      this_data.tx_frame_diff = this_data.tx_frame - last_data.tx_frame
      this_data.rx_frame_diff = this_data.rx_frame - last_data.rx_frame
    end
    this_data.clearpct = this_data.cleardiff / this_data.cdiff
    this_data.localbusy = (this_data.tx_frame_diff + this_data.rx_frame_diff) / this_data.cdiff
    debug_print("10k cycle "..this_data.cycle.." "..this_data.cdiff.." clear "..math.floor(this_data.clearpct*100).."% local "..math.floor(this_data.localbusy*100).."%")
  end

  data.ath10k[ath10k_phy] = this_data

  return this_data.clearpct, this_data.localbusy
end

function add_busy(interface, busy, busylocal)
  local now = os.time()

  if (busydata[interface] == nil) then
    busydata[interface] = {}
  end

  table.insert(busydata[interface], "["..now..", "..math.floor(busy*100)..", "..math.floor(busylocal*100).."]")
  if(table.maxn(busydata[interface]) >= 60) then
    table.remove(busydata[interface], 1)
  end
  local datafd = io.open("/tmp/lib/wifibusy/."..interface, "w+")
  datafd:write("["..table.concat(busydata[interface],",\n").."]\n")
  datafd:close()
  os.rename("/tmp/lib/wifibusy/."..interface, "/tmp/lib/wifibusy/"..interface)
end

function ath9k_busy(arguments)
  local interface = arguments.interface

  local pct, pctlocal = gather_ath9k(interface)

  if pct == nil then
    debug_print("ath9k interface "..interface.." nil data")
    return
  end

  add_busy(interface, pct, pctlocal)  
end

function ath10k_busy(arguments)
  local phy = arguments.phy

  local pct, pctlocal = gather_ath10k(phy)

  if pct == nil then
    debug_print("ath10k phy "..phy.." nil data")
    return
  end

  add_busy(arguments.interface, pct, pctlocal)  
end

function getinterface(interface)
  local busyfunctions = {ath9k=ath9k_busy, ath10k=ath10k_busy}

  if busyfunctions[interface.inttype] ~= nil then
    busyfunctions[interface.inttype](interface)
  else
    debug_print("inttype "..interface.inttype.." unknown, ignored")
  end
end

while true do
  uci:foreach("wifibusy", "interface", getinterface)
  debug_print("")

  -- sleep for 3 seconds
  nixio.nanosleep(3)
end

